name: Release

on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      lsp_branch:
        required: true
        description: "lsp_branch"
        default: "dev"
        type: string
      chat_js_branch:
        description: "Branch name of chat-js"
        default: "dev"
        type: string
        required: true
jobs:
  # Set default values for inputs or use provided ones
  set-defaults:
    runs-on: ubuntu-latest
    outputs:
      lsp_version: ${{ steps.set-defaults.outputs.lsp_version }}
      chat_js_branch: ${{ steps.set-defaults.outputs.chat_js_branch }}
    steps:
      # Check out current repository to read refact_lsp file
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - id: set-defaults
        run: |
          echo "chat_js_branch=${{ github.event.inputs.chat_js_branch || 'main-stable' }}" >> $GITHUB_OUTPUT
          if [ -n "${{ github.event.inputs.lsp_version }}" ]; then
            echo "lsp_version=${{ github.event.inputs.lsp_version }}" >> $GITHUB_OUTPUT
          else
            echo "lsp_version=$(cat refact_lsp)" >> $GITHUB_OUTPUT
          fi

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  release:
    name: Release
    needs: set-defaults
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Java 17 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Set env CHANNEL
        shell: bash
        id: setupvars
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          GIT_BRANCH=${raw##*/}
          if [[ ${GIT_BRANCH} == "main" ]]; then 
              echo "PUBLISH_CHANNEL=default" >> "$GITHUB_ENV"
              echo "slack_notification_channel=stable" >> "$GITHUB_OUTPUT"
              echo "PUBLISH_EAP=0" >> "$GITHUB_ENV"
          else
              echo "PUBLISH_CHANNEL=eap" >> "$GITHUB_ENV"
              echo "slack_notification_channel=eap" >> "$GITHUB_OUTPUT"
              echo "PUBLISH_EAP=1" >> "$GITHUB_ENV"
          fi
          echo "GIT_BRANCH=${GIT_BRANCH}" >> "$GITHUB_ENV"
          echo "plugin_version=$(./gradlew properties -q | awk '/^version:/ {print $2}')" >> $GITHUB_OUTPUT
          echo "lsp_version=$(cat refact_lsp)" >> $GITHUB_OUTPUT

      - name: Download chat artifacts
        id: download-artifact-chat
        uses: dawidd6/action-download-artifact@v9
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: agent_gui_build.yml
          repo: smallcloudai/refact
          branch: ${{ needs.set-defaults.outputs.chat_js_branch }}
          path: ./chat_package
          name: lts-refact-chat-js-.*\.tgz
          name_is_regexp: true

      - name: Prepare chat package
        shell: bash
        run: |
          mkdir -p ./chat_package_fixed
          find ./chat_package -name "*.tgz" -type f -exec tar -xzf {} -C ./chat_package_fixed/ \;
          mv ./chat_package_fixed/package/dist ./src/main/resources/webview/dist
          rm -rf ./chat_package ./chat_package_fixed

      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        name: "Build refact-lsp"
        with:
          owner: smallcloudai
          repo: refact
          workflow_file_name: agent_engine_build.yml
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ needs.set-defaults.outputs.lsp_version }}

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: agent_engine_build.yml
          repo: smallcloudai/refact
          name_is_regexp: true
          name: dist-*
          branch: ${{ needs.set-defaults.outputs.lsp_version }}
          path: ./src/main/resources/bin

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT
          ./gradlew properties --console=plain -q
          ./gradlew printProductsReleases # prepare list of IDEs for Plugin Verifier

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew verifyPlugin -Dplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          PUBLISH_CHANNEL: ${{ env.PUBLISH_CHANNEL }}
          PUBLISH_EAP: ${{ env.PUBLISH_EAP }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishPlugin

      - name: Release in GH
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ github.token }}
          file: ./build/distributions/*.zip
          prerelease: ${{ env.PUBLISH_EAP == '1' }}
          tag: v${{ steps.setupvars.outputs.plugin_version }}  # Use the version from previous step with 'v' prefix
          overwrite: true
          file_glob: true

      - name: Notify to Discord
        run: |
          curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d '{"msg":"JB plugin ${{ steps.setupvars.outputs.plugin_version }} is released in ${{ steps.setupvars.outputs.slack_notification_channel }} channel"}'

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "JB plugin ${{ steps.setupvars.outputs.plugin_version }} is released in ${{ steps.setupvars.outputs.slack_notification_channel }} channel",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "by ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
