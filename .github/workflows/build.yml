name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:
  workflow_dispatch:
    inputs:
      chat_js_branch:
        description: "Branch name of chat-js"
        default: "main"
        type: string
      lsp_version:
        description: "LSP version (leave empty to use version from refact_lsp file)"
        required: false
        type: string
        default: ''
      force_build_lsp:
        type: boolean
        description: force build new lsp(for tests only)
        default: true
        required: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      # Set up conditional variables first
      - name: Set build flag
        id: set_build_flag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=${{ inputs.force_build_lsp }}" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Debug force_build_lsp
        run: echo "force_build_lsp is set to ${{ steps.set_build_flag.outputs.should_build }}"

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: "setup vars"
        id: setupvars
        run: |
          if [ -n "${{ inputs.lsp_version }}" ]; then
            echo "lsp_version=${{ inputs.lsp_version }}" >> $GITHUB_OUTPUT
          else
            echo "lsp_version=$(cat refact_lsp)" >> $GITHUB_OUTPUT
          fi

      - name: Download chat artifacts
        id: download-artifact-chat
        uses: dawidd6/action-download-artifact@v9
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: agent_gui_build.yml
          repo: smallcloudai/refact
          branch: ${{ inputs.chat_js_branch || 'main' }}
          path: ./chat_package
          name: lts-refact-chat-js-.*\.tgz
          name_is_regexp: true

      - name: Prepare chat package
        shell: bash
        run: |
          mkdir -p ./chat_package_fixed
          find ./chat_package -name "*.tgz" -type f -exec tar -xzf {} -C ./chat_package_fixed/ \;
          mv ./chat_package_fixed/package/dist ./src/main/resources/webview/dist
          rm -rf ./chat_package ./chat_package_fixed

      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        name: "Build refact-lsp"
        if: ${{ steps.set_build_flag.outputs.should_build == 'true' }}
        with:
          owner: smallcloudai
          repo: refact
          workflow_file_name: agent_engine_build.yml
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ steps.setupvars.outputs.lsp_version }}

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: agent_engine_build.yml
          repo: smallcloudai/refact
          name_is_regexp: true
          name: dist-*
          branch: ${{ steps.setupvars.outputs.lsp_version }}
          path: ./src/main/resources/bin

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v3

      # Setup Java 17 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT
          ./gradlew properties --console=plain -q
          ./gradlew printProductsReleases # prepare list of IDEs for Plugin Verifier

      # Run tests
      - name: Run Tests
        run: ./gradlew buildPlugin

#      # Collect Tests Result of failed tests
#      - name: Collect Tests Result
#        if: ${{ failure() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: tests-result
#          path: ${{ github.workspace }}/build/reports/tests
#
#      # Cache Plugin Verifier IDEs
#      - name: Setup Plugin Verifier IDEs Cache
#        uses: actions/cache@v4
#        with:
#          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
#          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}
#
#      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
#      - name: Run Plugin Verification tasks
#        run: ./gradlew verifyPlugin -Dplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}
#
#      # Collect Plugin Verifier Result
#      - name: Collect Plugin Verifier Result
#        uses: actions/upload-artifact@v4
#        with:
#          name: pluginVerifier-result
#          path: ${{ github.workspace }}/build/reports/pluginVerifier
#
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*